{"version":3,"sources":["redux/actions.ts","redux/reducers/formReducer.ts","redux/reducers/charactersReducer.ts","redux/sagas/postFormSaga.ts","redux/sagas/getCharactersSaga.ts","redux/sagas/updateCharactersSaga.ts","redux/sagas/deleteCharactersSaga.ts","redux/sagas/index.ts","redux/store.ts","components/AddForm.tsx","redux/container/AddFormContainer.ts","components/CharacterList.tsx","redux/container/CharacterListContainer.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["actionCreator","actionCreatorFactory","formActions","changeName","changeAge","initializeForm","postForm","async","characterActions","editName","editAge","getCharacters","updateCharacters","deleteCharacters","formReducer","reducerWithInitialState","name","age","error","case","state","started","done","failed","characterReducer","isFetching","characterArray","payload","result","runPostForm","e","preventDefault","axios","post","then","response","data","catch","action","call","put","params","watchPostForm","takeLatest","runGetCharacters","get","watchGetCharacters","runUpdateCharacters","id","console","log","watchUpdateCharacters","runDeleteCharacters","method","url","watchDeleteCharacters","rootSaga","all","sagaMiddleware","createSagaMiddleware","logger","createLogger","diff","collapsed","store","createStore","combineReducers","form","character","applyMiddleware","run","AddForm","props","className","onSubmit","placeholder","value","onChange","target","type","connect","appState","dispatch","inputValue","CharacterList","useState","Array","length","fill","edit","setEdit","useEffect","editHandler","useCallback","index","newArray","map","key","_id","Fragment","defaultValue","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a1097a1.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\n\nexport const actionCreator = actionCreatorFactory();\n\nexport const formActions = {\n  changeName: actionCreator<string>('CHANGE_NAME'),\n  changeAge: actionCreator<string>('CHANGE_AGE'),\n  initializeForm: actionCreator<void>('INITIALIZE_FORM'),\n  postForm: actionCreator.async<any, any, any>('POST_FORM'),\n};\n\nexport const characterActions = {\n  editName: actionCreator<string>('EDIT_NAME'),\n  editAge: actionCreator<string>('EDIT_AGE'),\n  getCharacters: actionCreator.async<any, any>('GET_CHARACTERS'),\n  updateCharacters: actionCreator.async<any, any>('UPDATE_CHARACTERS'),\n  deleteCharacters: actionCreator.async<any, any>('DELETE_CHARACTERS'),\n};\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { formActions } from '../actions';\n\nexport interface FormState {\n  name: string;\n  age: string;\n  error: {\n    name: string;\n    age: string;\n  };\n}\n\nconst initialState: FormState = {\n  name: '',\n  age: '',\n  error: {\n    name: '',\n    age: '',\n  },\n};\n\nexport const formReducer = reducerWithInitialState(initialState)\n  .case(formActions.changeName, (state, name) => {\n    return {\n      ...state,\n      name,\n    };\n  })\n  .case(formActions.changeAge, (state, age) => {\n    return {\n      ...state,\n      age,\n    };\n  })\n  .case(formActions.initializeForm, (state) => {\n    return {\n      ...state,\n      name: '',\n      age: '',\n    };\n  })\n  .case(formActions.postForm.started, (state) => {\n    return {\n      ...state,\n    };\n  })\n  .case(formActions.postForm.done, (state) => {\n    return {\n      ...state,\n    };\n  })\n  .case(formActions.postForm.failed, (state, error) => {\n    return {\n      ...state,\n      error: {\n        name: error.error.name,\n        age: error.error.age,\n      },\n    };\n  });\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { characterActions } from '../actions';\n\nexport interface CharactersState {\n  name: string;\n  age: string;\n  isFetching: boolean;\n  characterArray: {\n    _id: string;\n    name: string;\n    age: string;\n    _v: number;\n  }[];\n}\n\nconst initialState: CharactersState = {\n  name: '',\n  age: '',\n  isFetching: false,\n  characterArray: [],\n};\n\nexport const characterReducer = reducerWithInitialState(initialState)\n  .case(characterActions.editName, (state, name) => {\n    return {\n      ...state,\n      name,\n    };\n  })\n  .case(characterActions.editAge, (state, age) => {\n    return {\n      ...state,\n      age,\n    };\n  })\n  .case(characterActions.getCharacters.started, (state) => {\n    return {\n      ...state,\n      isFetching: true,\n    };\n  })\n  .case(characterActions.getCharacters.done, (state, payload) => {\n    return {\n      ...state,\n      isFetching: false,\n      characterArray: payload.result,\n    };\n  })\n  .case(characterActions.getCharacters.failed, (state) => {\n    return {\n      ...state,\n      isFetching: false,\n    };\n  })\n  .case(characterActions.updateCharacters.started, (state) => {\n    return {\n      ...state,\n    };\n  })\n  .case(characterActions.updateCharacters.done, (state, payload) => {\n    return {\n      ...state,\n      characterArray: payload.result,\n    };\n  })\n  .case(characterActions.updateCharacters.failed, (state) => {\n    return {\n      ...state,\n    };\n  })\n  .case(characterActions.deleteCharacters.started, (state) => {\n    return {\n      ...state,\n    };\n  })\n  .case(characterActions.deleteCharacters.done, (state, payload) => {\n    return {\n      ...state,\n      characterArray: payload.result,\n    };\n  })\n  .case(characterActions.deleteCharacters.failed, (state) => {\n    return {\n      ...state,\n    };\n  });\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { characterActions, formActions } from '../actions';\n\nconst postForm = (\n  e: React.FormEvent<HTMLFormElement>,\n  name: string,\n  age: string,\n) => {\n  e.preventDefault();\n  return axios\n    .post('/api/characters', {\n      name,\n      age,\n    })\n    .then((response) => {\n      const characterArray = response.data;\n      return { characterArray, e, name, age };\n    })\n    .catch((error) => {\n      return { error };\n    });\n};\n\nfunction* runPostForm(action: {\n  type: string;\n  payload: {\n    e: React.FormEvent<HTMLFormElement>;\n    name: string;\n    age: string;\n  };\n}) {\n  const { characterArray, e, name, age, error } = yield call(\n    postForm,\n    action.payload.e,\n    action.payload.name,\n    action.payload.age,\n  );\n\n  if (characterArray && e && name && age) {\n    yield put(\n      formActions.postForm.done({\n        params: {},\n        result: characterArray,\n      }),\n    );\n    yield put(\n      characterActions.getCharacters.done({\n        params: {},\n        result: characterArray,\n      }),\n    );\n    yield put(formActions.initializeForm());\n  } else {\n    yield put(\n      formActions.postForm.failed({\n        params: {},\n        error: error.response.data,\n      }),\n    );\n  }\n}\n\nexport const watchPostForm = [\n  takeLatest(formActions.postForm.started, runPostForm),\n];\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { characterActions } from '../actions';\n\nconst getCharacters = () => {\n  return axios\n    .get('/api/characters')\n    .then((response) => {\n      const characterArray = response.data;\n      return { characterArray };\n    })\n    .catch((error) => {\n      return { error };\n    });\n};\n\nfunction* runGetCharacters() {\n  const { characterArray, error } = yield call(getCharacters);\n\n  if (characterArray) {\n    yield put(\n      characterActions.getCharacters.done({\n        params: {},\n        result: characterArray,\n      }),\n    );\n  } else {\n    yield put(\n      characterActions.getCharacters.failed({ params: {}, error: error }),\n    );\n  }\n}\n\nexport const watchGetCharacters = [\n  takeLatest(characterActions.getCharacters.started, runGetCharacters),\n];\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { characterActions } from '../actions';\n\nconst updateCharacters = (id: string, name: string, age: number) => {\n  return axios\n    .put('/api/characters', {\n      id,\n      name,\n      age,\n    })\n    .then((response) => {\n      const characterArray = response.data;\n      return { characterArray, id, name, age };\n    })\n    .catch((error) => {\n      return { error };\n    });\n};\n\nfunction* runUpdateCharacters(action: {\n  type: string;\n  payload: { id: string; name: string; age: number };\n}) {\n  const { characterArray, id, name, age, error } = yield call(\n    updateCharacters,\n    action.payload.id,\n    action.payload.name,\n    action.payload.age,\n  );\n\n  console.log(id, name, age);\n\n  if (characterArray && id && name && age) {\n    yield put(\n      characterActions.updateCharacters.done({\n        params: {},\n        result: characterArray,\n      }),\n    );\n  } else {\n    yield put(\n      characterActions.updateCharacters.failed({ params: {}, error: error }),\n    );\n  }\n}\n\nexport const watchUpdateCharacters = [\n  takeLatest(characterActions.updateCharacters.started, runUpdateCharacters),\n];\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { characterActions } from '../actions';\n\nconst deleteCharacters = (id: string) => {\n  return axios({\n    method: 'delete',\n    url: '/api/characters',\n    data: {\n      id,\n    },\n  })\n    .then((response) => {\n      const characterArray = response.data;\n      return {\n        characterArray,\n        id,\n      };\n    })\n    .catch((error) => {\n      return { error };\n    });\n};\n\nfunction* runDeleteCharacters(action: {\n  type: string;\n  payload: { id: string };\n}) {\n  const { characterArray, id, error } = yield call(\n    deleteCharacters,\n    action.payload.id,\n  );\n\n  if (characterArray && id) {\n    yield put(\n      characterActions.deleteCharacters.done({\n        params: {},\n        result: characterArray,\n      }),\n    );\n  } else {\n    yield put(\n      characterActions.deleteCharacters.failed({ params: {}, error: error }),\n    );\n  }\n}\n\nexport const watchDeleteCharacters = [\n  takeLatest(characterActions.deleteCharacters.started, runDeleteCharacters),\n];\n","import { all } from 'redux-saga/effects';\nimport { watchPostForm } from './postFormSaga';\nimport { watchGetCharacters } from './getCharactersSaga';\nimport { watchUpdateCharacters } from './updateCharactersSaga';\nimport { watchDeleteCharacters } from './deleteCharactersSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    ...watchPostForm,\n    ...watchGetCharacters,\n    ...watchUpdateCharacters,\n    ...watchDeleteCharacters,\n  ]);\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { formReducer, FormState } from './reducers/formReducer';\nimport {\n  characterReducer,\n  CharactersState,\n} from './reducers/charactersReducer';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport type AppState = {\n  form: FormState;\n  character: CharactersState;\n};\n\nconst logger = createLogger({\n  diff: true,\n  collapsed: true,\n});\n\nconst store = createStore(\n  combineReducers<AppState>({\n    form: formReducer,\n    character: characterReducer,\n  }),\n  {},\n  applyMiddleware(sagaMiddleware, logger),\n);\n\nsagaMiddleware.run(rootSaga);\nexport default store;\n","import React from 'react';\nimport { FormState } from '../redux/reducers/formReducer';\nimport { AddFormActions } from '../redux/container/AddFormContainer';\n\nimport './AddForm.scss';\n\ntype AddFormProps = FormState & AddFormActions;\n\nconst AddForm: React.FC<AddFormProps> = (props) => {\n  const { name, age, error } = props;\n\n  return (\n    <div className=\"AddForm\">\n      <h2 className=\"AddForm__title\">フォーム</h2>\n      <form onSubmit={(e) => props.postForm(e, name, age)}>\n        <input\n          className=\"AddForm__input\"\n          placeholder=\"名前\"\n          value={name}\n          onChange={(e) => props.changeName(e.target.value)}\n        />\n        <p>{error.name}</p>\n        <input\n          className=\"AddForm__input\"\n          placeholder=\"年齢\"\n          value={age}\n          onChange={(e) => props.changeAge(e.target.value)}\n        />\n        <p>{error.age}</p>\n        <button className=\"AddForm__submit\" type=\"submit\">\n          送信\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddForm;\n","import { Action } from 'typescript-fsa';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState } from '../store';\nimport { formActions } from '../actions';\nimport AddForm from '../../components/AddForm';\n\nexport interface AddFormActions {\n  changeName: (inputValue: string) => Action<string>;\n  changeAge: (inputValue: string) => Action<string>;\n  initializeForm: () => Action<void>;\n  postForm: (\n    e: React.FormEvent<HTMLFormElement>,\n    name: string,\n    age: string,\n  ) => Action<{}>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n  return {\n    ...appState.form,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<string | void | {}>>) => {\n  return {\n    changeName: (inputValue: string) =>\n      dispatch(formActions.changeName(inputValue)),\n    changeAge: (inputValue: string) =>\n      dispatch(formActions.changeAge(inputValue)),\n    initializeForm: () => dispatch(formActions.initializeForm()),\n    postForm: (\n      e: React.FormEvent<HTMLFormElement>,\n      name: string,\n      age: string,\n    ) => dispatch(formActions.postForm.started({ params: {}, e, name, age })),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CharactersState } from '../redux/reducers/charactersReducer';\nimport { CharacterListActions } from '../redux/container/CharacterListContainer';\n\nimport './CharacterList.scss';\n\ntype CharacterListProps = CharactersState & CharacterListActions;\n\nconst CharacterList: React.FC<CharacterListProps> = (props) => {\n  const [edit, setEdit] = useState(\n    new Array<boolean>(props.characterArray.length).fill(false),\n  );\n\n  useEffect(() => {\n    props.getCharacters();\n  }, []);\n\n  const editHandler = useCallback(\n    (index: number) => {\n      const newArray = [...edit];\n      newArray[index] = !newArray[index];\n      setEdit(newArray);\n    },\n    [edit],\n  );\n\n  return (\n    <div className=\"CharacterList\">\n      {props.isFetching ? (\n        <h2 className=\"CharacterList__title\">Now Loading...</h2>\n      ) : (\n        <div>\n          <h2 className=\"CharacterList__title\">リスト</h2>\n          <ul className=\"CharacterList__list\">\n            {props.characterArray.map((character, index) => (\n              <li key={character._id} className=\"CharacterList__listItem\">\n                {edit[index] ? (\n                  <React.Fragment>\n                    <input\n                      className=\"CharacterList__edit\"\n                      defaultValue={character.name}\n                      onChange={(e) => props.editName(e.target.value)}\n                    />\n                    <input\n                      className=\"CharacterList__edit\"\n                      defaultValue={character.age}\n                      onChange={(e) => props.editAge(e.target.value)}\n                    />\n                  </React.Fragment>\n                ) : (\n                  `${character.name} (${character.age})`\n                )}\n                <div className=\"CharacterList__listArea\">\n                  <button\n                    className=\"CharacterList__listButton\"\n                    onClick={() => {\n                      props.updateCharacters(\n                        character._id,\n                        props.name ? props.name : character.name,\n                        props.age ? props.age : character.age,\n                      );\n                      editHandler(index);\n                    }}\n                  >\n                    <i className=\"gg-edit-markup\"></i>\n                  </button>\n                  <button\n                    className=\"CharacterList__listButton\"\n                    onClick={() => props.deleteCharacters(character._id)}\n                  >\n                    <i className=\"gg-trash\"></i>\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CharacterList;\n","import { Action } from 'typescript-fsa';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState } from '../store';\nimport { characterActions } from '../actions';\nimport CharacterList from '../../components/CharacterList';\n\nexport interface CharacterListActions {\n  editName: (name: string) => Action<string>;\n  editAge: (age: string) => Action<string>;\n  getCharacters: () => Action<{}>;\n  updateCharacters: (id: string, name: string, age: string) => Action<{}>;\n  deleteCharacters: (id: string) => Action<{}>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n  return {\n    ...appState.character,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<{}>>) => {\n  return {\n    editName: (name: string) => dispatch(characterActions.editName(name)),\n    editAge: (age: string) => dispatch(characterActions.editAge(age)),\n    getCharacters: () =>\n      dispatch(characterActions.getCharacters.started({ params: {} })),\n    updateCharacters: (id: string, name: string, age: string) =>\n      dispatch(\n        characterActions.updateCharacters.started({\n          params: {},\n          id,\n          name,\n          age,\n        }),\n      ),\n    deleteCharacters: (id: string) =>\n      dispatch(characterActions.deleteCharacters.started({ params: {}, id })),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterList);\n","import React from 'react';\nimport AddForm from '../redux/container/AddFormContainer';\nimport CharacterList from '../redux/container/CharacterListContainer';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AddForm />\n      <CharacterList />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Store from './redux/store';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}